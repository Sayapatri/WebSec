An authorization framework that enables websites and web applications to request limited access to a user's account on another application..


 OAuth grant type?
 =================
 The OAuth grant type determines the exact sequence of steps that are involved in the OAuth process. 
 The grant type also affects how the client application communicates with the OAuth service at each stage, including how the access token itself is sent.
 For this reason, grant types are often referred to as "OAuth flows".
"authorization code" and "implicit" grant types as these are by far the most common.

 the client application has to specify which data it wants to access and what kind of operations it wants to perform. 
 It does this using the scope parameter of the authorization

Improper implementation of the implicit grant type
Due to the dangers introduced by sending access tokens via the browser, the implicit grant type is mainly recommended for single-page applications. However, it is also often used in classic client-server web applications because of its relative simplicity.

In this flow, the access token is sent from the OAuth service to the client application via the user's browser as a URL fragment. The client application then accesses the token using JavaScript. The trouble is, if the application wants to maintain the session after the user closes the page, it needs to store the current user data (normally a user ID and the access token) somewhere.

To solve this problem, the client application will often submit this data to the server in a POST request and then assign the user a session cookie, effectively logging them in. This request is roughly equivalent to the form submission request that might be sent as part of a classic, password-based login. However, in this scenario, the server does not have any secrets or passwords to compare with the submitted data, which means that it is implicitly trusted.

In the implicit flow, this POST request is exposed to attackers via their browser. As a result, this behavior can lead to a serious vulnerability if the client application doesn't properly check that the access token matches the other data in the request. In this case, an attacker can simply change the parameters sent to the server to impersonate any user.
